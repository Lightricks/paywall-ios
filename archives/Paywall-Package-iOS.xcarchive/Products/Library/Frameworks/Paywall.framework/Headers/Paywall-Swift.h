// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef PAYWALL_SWIFT_H
#define PAYWALL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import StoreKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Paywall",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@class NSNumber;
@protocol PaywallDelegate;
@class NSString;
@class UIViewController;

/// <code>Paywall</code> is the primary class for integrating Superwall into your application. To learn more, read our iOS getting started guide: https://docs.superwall.me/docs/ios
SWIFT_CLASS("_TtC7Paywall7Paywall")
@interface Paywall : NSObject
/// Prints debug logs to the console if set to <code>true</code>. Default is <code>false</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debugMode;)
+ (BOOL)debugMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebugMode:(BOOL)value;
/// The object that acts as the delegate of Paywall. Required implementations include <code>userDidInitiateCheckout(for product: SKProduct)</code> and <code>shouldTryToRestore()</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <PaywallDelegate> _Nullable delegate;)
+ (id <PaywallDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <PaywallDelegate> _Nullable)value;
/// Pre-loads your paywall so it loads instantly on <code>Paywall.present()</code>.
/// \param completion A completion block of type <code>((Bool) -> ())?</code>, defaulting to nil if not provided. <code>true</code> on success, and <code>false</code> on failure.
///
+ (void)loadWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// Configures an instance of Superwall’s Paywall SDK with a specified API key. If you don’t pass through a userId, we’ll create one for you. Calling <code>Paywall.identify(userId: String)</code> in the future will automatically alias these two for simple reporting.
/// \param apiKey Your Public API Key from: https://superwall.me/applications/1/settings/keys
///
/// \param userId Your user’s unique identifier, as defined by your backend system.
///
+ (Paywall * _Nonnull)configureWithApiKey:(NSString * _Nonnull)apiKey userId:(NSString * _Nullable)userId;
/// Links your userId to Superwall’s automatically generated Alias. Call this as soon as you have a userId.
/// \param userId Your user’s unique identifier, as defined by your backend system.
///
+ (Paywall * _Nonnull)identifyWithUserId:(NSString * _Nonnull)userId;
/// Resets the userId stored by Superwall. Call this when your user signs out.
+ (Paywall * _Nonnull)reset;
/// Dismisses the presented paywall. Doesn’t trigger a <code>PurchaseCompletionBlock</code> call if provided during <code>Paywall.present()</code>, since this action is developer initiated.
/// \param completion A completion block of type <code>(()->())? = nil</code> that gets called after the paywall is dismissed.
///
+ (void)dismiss:(void (^ _Nullable)(void))completion;
/// Presents a paywall to the user.
/// \param cached Determines if Superwall shoudl re-fetch a paywall from the user. You should typically set this to <code>false</code> only if you think your user may now conditionally match a rule for another paywall. Defaults to <code>true</code>.
///
/// \param presentationCompletion A completion block that gets called immediately after the paywall is presented. Defaults to  <code>nil</code>,
///
/// \param purchaseCompletion Gets called when the paywall is dismissed by the user, by way of purchasing, restoring or manually dismissing. Accepts a <code>Bool</code> that is <code>true</code> if the product is purchased or restored, and <code>false</code> if the paywall is manually dismissed by the user.
///
+ (void)presentWithCached:(BOOL)cached presentationCompletion:(void (^ _Nullable)(void))presentationCompletion purchaseCompletion:(void (^ _Nullable)(BOOL))purchaseCompletion;
/// Presents a paywall to the user.
/// \param presentationCompletion A completion block that gets called immediately after the paywall is presented. Defaults to  <code>nil</code>,
///
/// \param purchaseCompletion Gets called when the paywall is dismissed by the user, by way of purchasing, restoring or manually dismissing. Accepts a <code>Bool</code> that is <code>true</code> if the product is purchased or restored, and <code>false</code> if the paywall is manually dismissed by the user.
///
+ (void)presentWithPresentationCompletion:(void (^ _Nullable)(void))presentationCompletion purchaseCompletion:(void (^ _Nullable)(BOOL))purchaseCompletion;
/// Presents a paywall to the user.
/// \param purchaseCompletion Gets called when the paywall is dismissed by the user, by way of purchasing, restoring or manually dismissing. Accepts a <code>Bool</code> that is <code>true</code> if the product is purchased or restored, and <code>false</code> if the paywall is manually dismissed by the user.
///
+ (void)presentWithPurchaseCompletion:(void (^ _Nullable)(BOOL))purchaseCompletion;
/// Presents a paywall to the user.
/// \param cached Determines if Superwall shoudl re-fetch a paywall from the user. You should typically set this to <code>false</code> only if you think your user may now conditionally match a rule for another paywall. Defaults to <code>true</code>.
///
+ (void)presentWithCached:(BOOL)cached;
/// Presents a paywall to the user.
+ (void)present;
/// Presents a paywall to the user.
/// \param on The view controller to present the paywall on. Presents on the <code>keyWindow</code>’s <code>rootViewController</code> if <code>nil</code>. Defaults to <code>nil</code>.
///
/// \param cached Determines if Superwall shoudl re-fetch a paywall from the user. You should typically set this to <code>false</code> only if you think your user may now conditionally match a rule for another paywall. Defaults to <code>true</code>.
///
/// \param presentationCompletion A completion block that gets called immediately after the paywall is presented. Defaults to  <code>nil</code>,
///
/// \param purchaseCompletion Gets called when the paywall is dismissed by the user, by way of purchasing, restoring or manually dismissing. Accepts a <code>Bool</code> that is <code>true</code> if the product is purchased or restored, and <code>false</code> if the paywall is manually dismissed by the user.
///
+ (void)presentOn:(UIViewController * _Nullable)viewController cached:(BOOL)cached presentationCompletion:(void (^ _Nullable)(void))presentationCompletion purchaseCompletion:(void (^ _Nullable)(BOOL))purchaseCompletion fallback:(void (^ _Nullable)(void))fallback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SKPaymentQueue;
@class SKPaymentTransaction;

@interface Paywall (SWIFT_EXTENSION(Paywall)) <SKPaymentTransactionObserver>
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue updatedTransactions:(NSArray<SKPaymentTransaction *> * _Nonnull)transactions;
@end


@interface Paywall (SWIFT_EXTENSION(Paywall))
/// Tracks a custom event with properties. Remember to check <code>Paywall.StandardEvent</code> to determine if you should be tracking a standard event instead. Properties are optional and can be added only if needed. You’ll be able to reference properties when creating rules for when paywalls show up.
/// Example:
/// \code
/// Paywall.track("onboarding_skip", ["steps_completed": 4])
///
/// \endcode\param event The name of your custom event
///
/// \param params Custom parameters you’d like to include in your event. Remember, keys begining with <code>$</code> are reserved for Superwall and will be dropped. They will however be included in <code>PaywallDelegate.shouldTrack(event: String, params: [String: Any])</code> for your own records. Values can be any JSON encodable value, URLs or Dates. Arrays and dictionaries as values are not supported at this time, and will be dropped.
///
+ (void)track:(NSString * _Nonnull)name :(NSDictionary<NSString *, id> * _Nonnull)params;
/// Warning: Should prefer <code>track</code> if using Swift
/// Tracks a event with properties. Remember to check <code>Paywall.StandardEvent</code> to determine if you should use a string which maps to standard event name. Properties are optional and can be added only if needed. You’ll be able to reference properties when creating rules for when paywalls show up.
/// Example:
/// \code
/// [Paywall trackWithName:@"onboarding_skip" params:NSDictionary()];
///
/// \endcode\param event The name of your custom event
///
/// \param params Custom parameters you’d like to include in your event. Remember, keys begining with <code>$</code> are reserved for Superwall and will be dropped. They will however be included in <code>PaywallDelegate.shouldTrack(event: String, params: [String: Any])</code> for your own records. Values can be any JSON encodable value, URLs or Dates. Arrays and dictionaries as values are not supported at this time, and will be dropped.
///
+ (void)trackWithName:(NSString * _Nonnull)name params:(NSDictionary * _Nullable)params;
/// <em>Note</em> Please use <code>setUserAttributes</code> if you’re using Swift.
/// Sets additional information on the user object in Superwall. Useful for analytics and conditional paywall rules you may define in the web dashboard. Remember, attributes are write-only by the SDK, and only require your public key. They should not be used as a source of truth for sensitive information.
/// We make our best effort to pick out “known” user attributes and set them to our internal names. For exampe <code>{"first_name": "..." }</code> and <code>{"firstName": "..."}</code> will both be translated into <code>$first_name</code> for use in Superwall where we require a first name.
/// Example:
/// \code
/// var userAttributes: NSDictionary = NSDictionary()
/// userAttributes.setValue(value: "Jake", forKey: "first_name");
/// Superwall.setUserAttributes(userAttributes)
///
/// \endcode\param attributes A <code>NSDictionary</code> used to describe user attributes and any custom attributes you’d like to store to the user. Remember, keys begining with <code>$</code> are reserved for Superwall and will be dropped. Values can be any JSON encodable value, URLs or Dates. Arrays and dictionaries as values are not supported at this time, and will be dropped.
///
+ (void)setUserAttributesDictionaryWithAttributes:(NSDictionary * _Nonnull)attributes;
@end

@class SKProduct;
@class NSURL;

/// Methods for managing important Paywall lifecycle events. For example, telling the developer when to initiate checkout on a specific <code>SKProduct</code> and when to try to restore a transaction. Also includes hooks for you to log important analytics events to your product analytics tool.
SWIFT_PROTOCOL("_TtP7Paywall15PaywallDelegate_")
@protocol PaywallDelegate
/// Called when the user initiates checkout for a product. Add your purchase logic here by either calling <code>Purchases.shared.purchaseProduct()</code> (if you use RevenueCat: https://sdk.revenuecat.com/ios/Classes/RCPurchases.html#/c:objc(cs)RCPurchases(im)purchaseProduct:withCompletionBlock:) or by using Apple’s StoreKit APIs
/// \param product The <code>SKProduct</code> the user would like to purchase
///
- (void)userDidInitiateCheckoutFor:(SKProduct * _Nonnull)product;
/// Called when the user initiates a restore. Add your restore logic here.
- (void)shouldTryToRestore;
/// Called before ever showing a paywall. Return <code>false</code> if the user has active entitlements and <code>true</code> if the user does not.
- (BOOL)shouldPresentPaywall SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when the user taps a button with a custom <code>data-pw-custom</code> tag in your HTML paywall. See paywall.js for further documentation
/// \param withName The value of the <code>data-pw-custom</code> tag in your HTML element that the user selected.
///
- (void)didReceiveCustomEventWithName:(NSString * _Nonnull)name;
/// Called right before the paywall is dismissed.
- (void)willDismissPaywall;
/// Called right before the paywall is presented.
- (void)willPresentPaywall;
/// Called right after the paywall is dismissed.
- (void)didDismissPaywall;
/// Called right after the paywall is presented.
- (void)didPresentPaywall;
/// Called when the user opens a URL by selecting an element with the <code>data-pw-open-url</code> tag in your HTML paywall.
- (void)willOpenURLWithUrl:(NSURL * _Nonnull)url;
/// Called when the user taps a deep link in your HTML paywall.
- (void)willOpenDeepLinkWithUrl:(NSURL * _Nonnull)url;
/// Called when you should track a standard internal analytics event to your own system. If you want the event’s name as an enum, do this:<code>let e = Paywall.EventName(rawValue: name)</code>
/// Possible Values:
/// \code
/// // App Lifecycle Events
/// Paywall.delegate.shouldTrack(event: "app_install", params: nil)
/// Paywall.delegate.shouldTrack(event: "app_open", params: nil)
/// Paywall.delegate.shouldTrack(event: "app_close", params: nil)
///
/// // Paywall Events
/// Paywall.delegate.shouldTrack(event: "paywall_open", params: ['paywall_id': 'someid'])
/// Paywall.delegate.shouldTrack(event: "paywall_close", params: ['paywall_id': 'someid'])
///
/// // Transaction Events
/// Paywall.delegate.shouldTrack(event: "transaction_start", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
/// Paywall.delegate.shouldTrack(event: "transaction_fail", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
/// Paywall.delegate.shouldTrack(event: "transaction_abandon", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
/// Paywall.delegate.shouldTrack(event: "transaction_complete", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
/// Paywall.delegate.shouldTrack(event: "transaction_restore", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
///
/// // Purchase Events
/// Paywall.delegate.shouldTrack(event: "subscription_start", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
/// Paywall.delegate.shouldTrack(event: "freeTrial_start", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
/// Paywall.delegate.shouldTrack(event: "nonRecurringProduct_purchase", params: ['paywall_id': 'someid', 'product_id': 'someskid'])
///
/// // Superwall API Request Events
/// Paywall.delegate.shouldTrack(event: "paywallResponseLoad_start", params: ['paywall_id': 'someid'])
/// Paywall.delegate.shouldTrack(event: "paywallResponseLoad_fail", params: ['paywall_id': 'someid'])
/// Paywall.delegate.shouldTrack(event: "paywallResponseLoad_complete", params: ['paywall_id': 'someid'])
///
/// // Webview Reqeuest Events
/// Paywall.delegate.shouldTrack(event: "paywallWebviewLoad_start", params: ['paywall_id': 'someid'])
/// Paywall.delegate.shouldTrack(event: "paywallWebviewLoad_fail", params: ['paywall_id': 'someid'])
/// Paywall.delegate.shouldTrack(event: "paywallWebviewLoad_complete", params: ['paywall_id': 'someid'])
///
/// \endcode
- (void)shouldTrackWithEvent:(NSString * _Nonnull)event params:(NSDictionary<NSString *, id> * _Nonnull)params;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
